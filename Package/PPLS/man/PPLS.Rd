% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EM_W_multi.R
\name{PPLS}
\alias{PPLS}
\title{Performs PPLS fit.}
\usage{
PPLS(X, Y, nr_comp = 1, EMsteps = 100, atol = 1e-04,
  initialGuess = c("equal", "o2m", "random", "custom"), customGuess = NULL,
  critfunc = function(x) {     x }, constraints = lapply(1:nr_comp,
  fconstraint))
}
\arguments{
\item{X}{Numeric matrix.}

\item{Y}{Numeric matrix.}

\item{nr_comp}{Strictly positive integer. The number of PPLS components to fit.}

\item{EMsteps}{strictly positive integer. Denotes the maximum number of EM steps to make.}

\item{atol}{Double, convergence criterium for the log-likelihood}

\item{initialGuess}{A string. Choose "o2m", "random" or "equal" depending on what type of initial guess you want.}

\item{customGuess}{A list with named components W,C,B,sigE,sigF,sigH,sigT.}

\item{critfunc}{Function measuring the increment value, i.e. f(L_{i+1} - L_{i}). Usually f == I or f == abs.}

\item{constraints}{List. Each element of \code{constraints} contains a named list, ideally being constructed with \link{fconstraint}. The numer of elements in \code{constraints} must equal nr_comp.}
}
\value{
A list with estimates for\itemize{
   \item{W }{Matrix, each column is a fit.}
   \item{C }{Matrix, each column is a fit.}
   \item{B }{Matrix, each column is a fit.}
   \item{sig }{Matrix containing updated sigX, sigY, sigH and sigT. Columns are named.}
   \item{Other_output }{\itemize{
         \item{Last_increment}{ Last likelihood increment}
         \item{Number_steps}{ Number of EM steps}
         \item{Loglikelihoods}{ Likelihood at final step}
         }
   }
 }
}
\description{
Performs PPLS fit.
}
\details{
This function estimates loadings and variances for multiple orthogonal directions. The loadings are W and C.
The X-scores can be retrieved via \code{X \%*\% fit$W} where fit is a PPLS fit, or with the function \code{\link{scores.PPLS}}.
The o2m initial guess fits a PLS model using the function \code{OmicsPLS::o2m} and uses the result as starting values.
If for some reason the likelihood is not monotone, check your input data or (re)try with \code{initialGuess = 'random'}.

Use \code{plot(fit)} to plot the first two loadings. Use \code{print(fit,perc=TRUE)} for variances in percentages.
}
\examples{
exX = scale(matrix(rnorm(100*10),100,10))
exY = scale(matrix(rnorm(100*12),100,12))
PPLS(X = exX, Y = exY, nr_comp = 3, EMsteps = 1e4)
PPLS(X = exX, Y = exY, nr_comp = 3, EMsteps = 1e4, initialGuess = "random")

# devtools::install_github("selbouhaddani/OmicsPLS")
if(require(OmicsPLS)){
 exinitGuess = list(W = orth(1:10), C = orth(1:12), B = 0.1,
                     sigE = 1,sigF = 1,sigH = 1,sigT = 0.1)
 PPLS(X = exX, Y = exY, nr_comp = 1, EMsteps = 1e4,
       initialGuess = "custom", customGuess = exinitGuess)
}
exconstraints = list(fconstraint(list(B = 1)) , fconstraint(list(sigT = 1)))
PPLS(X = exX, Y = exY, nr_comp = 2, EMsteps = 1e4, constraints = exconstraints)
}
